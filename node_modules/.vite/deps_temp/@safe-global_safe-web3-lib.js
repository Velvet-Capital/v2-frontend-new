import {
  require_src
} from "./chunk-JOMINOH4.js";
import {
  init_lib3 as init_lib,
  lib_exports2 as lib_exports
} from "./chunk-IQS6MO5T.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-AC2VUBZ6.js";

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/CompatibilityFallbackHandler/CompatibilityFallbackHandlerWeb3Contract.js
var require_CompatibilityFallbackHandlerWeb3Contract = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/CompatibilityFallbackHandler/CompatibilityFallbackHandlerWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CompatibilityFallbackHandlerWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
    };
    exports.default = CompatibilityFallbackHandlerWeb3Contract;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/CompatibilityFallbackHandler/v1.3.0/CompatibilityFallbackHandler_V1_3_0_Web3.js
var require_CompatibilityFallbackHandler_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/CompatibilityFallbackHandler/v1.3.0/CompatibilityFallbackHandler_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CompatibilityFallbackHandlerWeb3Contract_1 = __importDefault(require_CompatibilityFallbackHandlerWeb3Contract());
    var CompatibilityFallbackHandler_V1_3_0_Web3 = class extends CompatibilityFallbackHandlerWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CompatibilityFallbackHandler_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/utils/index.js
var require_utils = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toTxResult = exports.sameString = void 0;
    function sameString(str1, str2) {
      return str1.toLowerCase() === str2.toLowerCase();
    }
    exports.sameString = sameString;
    async function toTxResult(promiEvent, options) {
      return new Promise((resolve, reject) => promiEvent.once("transactionHash", (hash) => resolve({ hash, promiEvent, options })).catch(reject));
    }
    exports.toTxResult = toTxResult;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/CreateCall/CreateCallWeb3Contract.js
var require_CreateCallWeb3Contract = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/CreateCall/CreateCallWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils();
    var CreateCallWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      async performCreate2(value, deploymentData, salt, options) {
        if (options && !options.gas) {
          options.gas = await this.estimateGas("performCreate2", [value, deploymentData, salt], {
            ...options
          });
        }
        const txResponse = this.contract.methods.performCreate2(value, deploymentData, salt).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async performCreate(value, deploymentData, options) {
        if (options && !options.gas) {
          options.gas = await this.estimateGas("performCreate", [value, deploymentData], { ...options });
        }
        const txResponse = this.contract.methods.performCreate(value, deploymentData).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
      async estimateGas(methodName, params, options) {
        try {
          return Number(await this.contract.methods[methodName](...params).estimateGas(options));
        } catch (error) {
          return Promise.reject(error);
        }
      }
    };
    exports.default = CreateCallWeb3Contract;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/CreateCall/v1.3.0/CreateCallEthersContract_V1_3_0_Web3.js
var require_CreateCallEthersContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/CreateCall/v1.3.0/CreateCallEthersContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CreateCallWeb3Contract_1 = __importDefault(require_CreateCallWeb3Contract());
    var CreateCallContract_V1_3_0_Web3 = class extends CreateCallWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CreateCallContract_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafe/GnosisSafeContractWeb3.js
var require_GnosisSafeContractWeb3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafe/GnosisSafeContractWeb3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib(), __toCommonJS(lib_exports));
    var utils_1 = require_utils();
    var GnosisSafeContractWeb3 = class {
      constructor(contract) {
        this.contract = contract;
      }
      async getVersion() {
        return await this.contract.methods.VERSION().call();
      }
      getAddress() {
        return this.contract.options.address;
      }
      async getNonce() {
        return Number(await this.contract.methods.nonce().call());
      }
      async getThreshold() {
        return Number(await this.contract.methods.getThreshold().call());
      }
      async getOwners() {
        return this.contract.methods.getOwners().call();
      }
      async isOwner(address) {
        return this.contract.methods.isOwner(address).call();
      }
      async getTransactionHash(safeTransactionData) {
        return this.contract.methods.getTransactionHash(safeTransactionData.to, safeTransactionData.value, safeTransactionData.data, safeTransactionData.operation, safeTransactionData.safeTxGas, safeTransactionData.baseGas, safeTransactionData.gasPrice, safeTransactionData.gasToken, safeTransactionData.refundReceiver, safeTransactionData.nonce).call();
      }
      async approvedHashes(ownerAddress, hash) {
        return bignumber_1.BigNumber.from(await this.contract.methods.approvedHashes(ownerAddress, hash).call());
      }
      async approveHash(hash, options) {
        if (options && !options.gas) {
          options.gas = await this.estimateGas("approveHash", [hash], { ...options });
        }
        const txResponse = this.contract.methods.approveHash(hash).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async isValidTransaction(safeTransaction, options) {
        let isTxValid = false;
        try {
          if (options && !options.gas) {
            options.gas = await this.estimateGas("execTransaction", [
              safeTransaction.data.to,
              safeTransaction.data.value,
              safeTransaction.data.data,
              safeTransaction.data.operation,
              safeTransaction.data.safeTxGas,
              safeTransaction.data.baseGas,
              safeTransaction.data.gasPrice,
              safeTransaction.data.gasToken,
              safeTransaction.data.refundReceiver,
              safeTransaction.encodedSignatures()
            ], {
              ...options
            });
          }
          isTxValid = await this.contract.methods.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures()).call(options);
        } catch {
        }
        return isTxValid;
      }
      async execTransaction(safeTransaction, options) {
        if (options && !options.gas) {
          options.gas = await this.estimateGas("execTransaction", [
            safeTransaction.data.to,
            safeTransaction.data.value,
            safeTransaction.data.data,
            safeTransaction.data.operation,
            safeTransaction.data.safeTxGas,
            safeTransaction.data.baseGas,
            safeTransaction.data.gasPrice,
            safeTransaction.data.gasToken,
            safeTransaction.data.refundReceiver,
            safeTransaction.encodedSignatures()
          ], {
            ...options
          });
        }
        const txResponse = this.contract.methods.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures()).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
      async estimateGas(methodName, params, options) {
        try {
          return Number(await this.contract.methods[methodName](...params).estimateGas(options));
        } catch (error) {
          return Promise.reject(error);
        }
      }
    };
    exports.default = GnosisSafeContractWeb3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/utils/constants.js
var require_constants = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/utils/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENTINEL_ADDRESS = exports.EMPTY_DATA = exports.ZERO_ADDRESS = void 0;
    exports.ZERO_ADDRESS = `0x${"0".repeat(40)}`;
    exports.EMPTY_DATA = "0x";
    exports.SENTINEL_ADDRESS = "0x0000000000000000000000000000000000000001";
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafe/v1.0.0/GnosisSafeContract_V1_0_0_Web3.js
var require_GnosisSafeContract_V1_0_0_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafe/v1.0.0/GnosisSafeContract_V1_0_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils();
    var GnosisSafeContractWeb3_1 = __importDefault(require_GnosisSafeContractWeb3());
    var constants_1 = require_constants();
    var GnosisSafeContract_V1_0_0_Web3 = class extends GnosisSafeContractWeb3_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gas) {
          options.gas = await this.estimateGas("setup", [owners, threshold, to, data, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = this.contract.methods.setup(owners, threshold, to, data, paymentToken, payment, paymentReceiver).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.methods.getModules().call();
      }
      async isModuleEnabled(moduleAddress) {
        const modules = await this.getModules();
        const isModuleEnabled = modules.some((enabledModuleAddress) => (0, utils_1.sameString)(enabledModuleAddress, moduleAddress));
        return isModuleEnabled;
      }
    };
    exports.default = GnosisSafeContract_V1_0_0_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafe/v1.1.1/GnosisSafeContract_V1_1_1_Web3.js
var require_GnosisSafeContract_V1_1_1_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafe/v1.1.1/GnosisSafeContract_V1_1_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils();
    var GnosisSafeContractWeb3_1 = __importDefault(require_GnosisSafeContractWeb3());
    var constants_1 = require_constants();
    var GnosisSafeContract_V1_1_1_Web3 = class extends GnosisSafeContractWeb3_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gas) {
          options.gas = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = this.contract.methods.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.methods.getModules().call();
      }
      async isModuleEnabled(moduleAddress) {
        const modules = await this.getModules();
        const isModuleEnabled = modules.some((enabledModuleAddress) => (0, utils_1.sameString)(enabledModuleAddress, moduleAddress));
        return isModuleEnabled;
      }
    };
    exports.default = GnosisSafeContract_V1_1_1_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafe/v1.2.0/GnosisSafeContract_V1_2_0_Web3.js
var require_GnosisSafeContract_V1_2_0_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafe/v1.2.0/GnosisSafeContract_V1_2_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils();
    var GnosisSafeContractWeb3_1 = __importDefault(require_GnosisSafeContractWeb3());
    var constants_1 = require_constants();
    var GnosisSafeContract_V1_2_0_Web3 = class extends GnosisSafeContractWeb3_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gas) {
          options.gas = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = this.contract.methods.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.methods.getModules().call();
      }
      async isModuleEnabled(moduleAddress) {
        return this.contract.methods.isModuleEnabled(moduleAddress).call();
      }
    };
    exports.default = GnosisSafeContract_V1_2_0_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafe/v1.3.0/GnosisSafeContract_V1_3_0_Web3.js
var require_GnosisSafeContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafe/v1.3.0/GnosisSafeContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils();
    var constants_1 = require_constants();
    var GnosisSafeContractWeb3_1 = __importDefault(require_GnosisSafeContractWeb3());
    var GnosisSafeContract_V1_3_0_Web3 = class extends GnosisSafeContractWeb3_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gas) {
          options.gas = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = this.contract.methods.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        const { array } = await this.contract.methods.getModulesPaginated(constants_1.SENTINEL_ADDRESS, 10).call();
        return array;
      }
      async isModuleEnabled(moduleAddress) {
        return this.contract.methods.isModuleEnabled(moduleAddress).call();
      }
    };
    exports.default = GnosisSafeContract_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafeProxyFactory/GnosisSafeProxyFactoryWeb3Contract.js
var require_GnosisSafeProxyFactoryWeb3Contract = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafeProxyFactory/GnosisSafeProxyFactoryWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib(), __toCommonJS(lib_exports));
    var utils_1 = require_utils();
    var GnosisSafeProxyFactoryWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      async proxyCreationCode() {
        return this.contract.methods.proxyCreationCode().call();
      }
      async createProxy({ safeMasterCopyAddress, initializer, saltNonce, options, callback }) {
        var _a, _b, _c;
        if (bignumber_1.BigNumber.from(saltNonce).lt(0))
          throw new Error("saltNonce must be greater than or equal to 0");
        if (options && !options.gas) {
          options.gas = await this.estimateGas("createProxyWithNonce", [safeMasterCopyAddress, initializer, saltNonce], {
            ...options
          });
        }
        const txResponse = this.contract.methods.createProxyWithNonce(safeMasterCopyAddress, initializer, saltNonce).send(options);
        if (callback) {
          const txResult2 = await (0, utils_1.toTxResult)(txResponse);
          callback(txResult2.hash);
        }
        const txResult = await new Promise((resolve, reject) => txResponse.once("receipt", (receipt) => resolve(receipt)).catch(reject));
        const proxyAddress = (_c = (_b = (_a = txResult.events) === null || _a === void 0 ? void 0 : _a.ProxyCreation) === null || _b === void 0 ? void 0 : _b.returnValues) === null || _c === void 0 ? void 0 : _c.proxy;
        if (!proxyAddress) {
          throw new Error("SafeProxy was not deployed correctly");
        }
        return proxyAddress;
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
      async estimateGas(methodName, params, options) {
        try {
          return Number(await this.contract.methods[methodName](...params).estimateGas(options));
        } catch (error) {
          return Promise.reject(error);
        }
      }
    };
    exports.default = GnosisSafeProxyFactoryWeb3Contract;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.0.0/GnosisSafeProxyFactoryContract_V1_0_0_Web3.js
var require_GnosisSafeProxyFactoryContract_V1_0_0_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.0.0/GnosisSafeProxyFactoryContract_V1_0_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var GnosisSafeProxyFactoryWeb3Contract_1 = __importDefault(require_GnosisSafeProxyFactoryWeb3Contract());
    var GnosisSafeProxyFactoryContract_V1_0_0_Web3 = class extends GnosisSafeProxyFactoryWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = GnosisSafeProxyFactoryContract_V1_0_0_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.1.1/GnosisSafeProxyFactoryContract_V1_1_1_Web3.js
var require_GnosisSafeProxyFactoryContract_V1_1_1_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.1.1/GnosisSafeProxyFactoryContract_V1_1_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var GnosisSafeProxyFactoryWeb3Contract_1 = __importDefault(require_GnosisSafeProxyFactoryWeb3Contract());
    var GnosisSafeProxyFactoryContract_V1_1_1_Web3 = class extends GnosisSafeProxyFactoryWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = GnosisSafeProxyFactoryContract_V1_1_1_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.3.0/GnosisSafeProxyFactoryContract_V1_3_0_Web3.js
var require_GnosisSafeProxyFactoryContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.3.0/GnosisSafeProxyFactoryContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var GnosisSafeProxyFactoryWeb3Contract_1 = __importDefault(require_GnosisSafeProxyFactoryWeb3Contract());
    var GnosisSafeProxyFactoryContract_V1_3_0_Web3 = class extends GnosisSafeProxyFactoryWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = GnosisSafeProxyFactoryContract_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/MultiSend/MultiSendWeb3Contract.js
var require_MultiSendWeb3Contract = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/MultiSend/MultiSendWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
    };
    exports.default = MultiSendWeb3Contract;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/MultiSend/v1.1.1/MultiSendContract_V1_1_1_Web3.js
var require_MultiSendContract_V1_1_1_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/MultiSend/v1.1.1/MultiSendContract_V1_1_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendWeb3Contract_1 = __importDefault(require_MultiSendWeb3Contract());
    var MultiSendContract_V1_1_1_Web3 = class extends MultiSendWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendContract_V1_1_1_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/MultiSend/v1.3.0/MultiSendContract_V1_3_0_Web3.js
var require_MultiSendContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/MultiSend/v1.3.0/MultiSendContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendWeb3Contract_1 = __importDefault(require_MultiSendWeb3Contract());
    var MultiSendContract_V1_3_0_Web3 = class extends MultiSendWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendContract_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/MultiSendCallOnly/MultiSendCallOnlyWeb3Contract.js
var require_MultiSendCallOnlyWeb3Contract = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/MultiSendCallOnly/MultiSendCallOnlyWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendCallOnlyWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
    };
    exports.default = MultiSendCallOnlyWeb3Contract;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/MultiSendCallOnly/v1.3.0/MultiSendCallOnlyContract_V1_3_0_Web3.js
var require_MultiSendCallOnlyContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/MultiSendCallOnly/v1.3.0/MultiSendCallOnlyContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendCallOnlyWeb3Contract_1 = __importDefault(require_MultiSendCallOnlyWeb3Contract());
    var MultiSendCallOnlyContract_V1_3_0_Web3 = class extends MultiSendCallOnlyWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendCallOnlyContract_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/SignMessageLib/SignMessageLibWeb3Contract.js
var require_SignMessageLibWeb3Contract = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/SignMessageLib/SignMessageLibWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils();
    var SignMessageLibWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      async signMessage(data, options) {
        if (options && !options.gas) {
          options.gas = await this.estimateGas("signMessage", [data], { ...options });
        }
        const txResponse = this.contract.methods.signMessage(data).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getMessageHash(message) {
        return this.contract.methods.getMessageHash(message).call();
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
      async estimateGas(methodName, params, options) {
        try {
          return Number(await this.contract.methods[methodName](...params).estimateGas(options));
        } catch (error) {
          return Promise.reject(error);
        }
      }
    };
    exports.default = SignMessageLibWeb3Contract;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/SignMessageLib/v1.3.0/SignMessageLibContract_V1_3_0_Web3.js
var require_SignMessageLibContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/SignMessageLib/v1.3.0/SignMessageLibContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SignMessageLibWeb3Contract_1 = __importDefault(require_SignMessageLibWeb3Contract());
    var SignMessageLibContract_V1_3_0_Web3 = class extends SignMessageLibWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SignMessageLibContract_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/contracts/contractInstancesWeb3.js
var require_contractInstancesWeb3 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/contracts/contractInstancesWeb3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCreateCallContractInstance = exports.getSignMessageLibContractInstance = exports.getGnosisSafeProxyFactoryContractInstance = exports.getMultiSendCallOnlyContractInstance = exports.getMultiSendContractInstance = exports.getCompatibilityFallbackHandlerContractInstance = exports.getSafeContractInstance = void 0;
    var CompatibilityFallbackHandler_V1_3_0_Web3_1 = __importDefault(require_CompatibilityFallbackHandler_V1_3_0_Web3());
    var CreateCallEthersContract_V1_3_0_Web3_1 = __importDefault(require_CreateCallEthersContract_V1_3_0_Web3());
    var GnosisSafeContract_V1_0_0_Web3_1 = __importDefault(require_GnosisSafeContract_V1_0_0_Web3());
    var GnosisSafeContract_V1_1_1_Web3_1 = __importDefault(require_GnosisSafeContract_V1_1_1_Web3());
    var GnosisSafeContract_V1_2_0_Web3_1 = __importDefault(require_GnosisSafeContract_V1_2_0_Web3());
    var GnosisSafeContract_V1_3_0_Web3_1 = __importDefault(require_GnosisSafeContract_V1_3_0_Web3());
    var GnosisSafeProxyFactoryContract_V1_0_0_Web3_1 = __importDefault(require_GnosisSafeProxyFactoryContract_V1_0_0_Web3());
    var GnosisSafeProxyFactoryContract_V1_1_1_Web3_1 = __importDefault(require_GnosisSafeProxyFactoryContract_V1_1_1_Web3());
    var GnosisSafeProxyFactoryContract_V1_3_0_Web3_1 = __importDefault(require_GnosisSafeProxyFactoryContract_V1_3_0_Web3());
    var MultiSendContract_V1_1_1_Web3_1 = __importDefault(require_MultiSendContract_V1_1_1_Web3());
    var MultiSendContract_V1_3_0_Web3_1 = __importDefault(require_MultiSendContract_V1_3_0_Web3());
    var MultiSendCallOnlyContract_V1_3_0_Web3_1 = __importDefault(require_MultiSendCallOnlyContract_V1_3_0_Web3());
    var SignMessageLibContract_V1_3_0_Web3_1 = __importDefault(require_SignMessageLibContract_V1_3_0_Web3());
    function getSafeContractInstance(safeVersion, safeContract) {
      switch (safeVersion) {
        case "1.3.0":
          return new GnosisSafeContract_V1_3_0_Web3_1.default(safeContract);
        case "1.2.0":
          return new GnosisSafeContract_V1_2_0_Web3_1.default(safeContract);
        case "1.1.1":
          return new GnosisSafeContract_V1_1_1_Web3_1.default(safeContract);
        case "1.0.0":
          return new GnosisSafeContract_V1_0_0_Web3_1.default(safeContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSafeContractInstance = getSafeContractInstance;
    function getCompatibilityFallbackHandlerContractInstance(safeVersion, compatibilityFallbackhandlerContract) {
      switch (safeVersion) {
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
          return new CompatibilityFallbackHandler_V1_3_0_Web3_1.default(compatibilityFallbackhandlerContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getCompatibilityFallbackHandlerContractInstance = getCompatibilityFallbackHandlerContractInstance;
    function getMultiSendContractInstance(safeVersion, multiSendContract) {
      switch (safeVersion) {
        case "1.3.0":
          return new MultiSendContract_V1_3_0_Web3_1.default(multiSendContract);
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          return new MultiSendContract_V1_1_1_Web3_1.default(multiSendContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getMultiSendContractInstance = getMultiSendContractInstance;
    function getMultiSendCallOnlyContractInstance(safeVersion, multiSendCallOnlyContract) {
      switch (safeVersion) {
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          return new MultiSendCallOnlyContract_V1_3_0_Web3_1.default(multiSendCallOnlyContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getMultiSendCallOnlyContractInstance = getMultiSendCallOnlyContractInstance;
    function getGnosisSafeProxyFactoryContractInstance(safeVersion, gnosisSafeProxyFactoryContract) {
      switch (safeVersion) {
        case "1.3.0":
          return new GnosisSafeProxyFactoryContract_V1_3_0_Web3_1.default(gnosisSafeProxyFactoryContract);
        case "1.2.0":
        case "1.1.1":
          return new GnosisSafeProxyFactoryContract_V1_1_1_Web3_1.default(gnosisSafeProxyFactoryContract);
        case "1.0.0":
          return new GnosisSafeProxyFactoryContract_V1_0_0_Web3_1.default(gnosisSafeProxyFactoryContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getGnosisSafeProxyFactoryContractInstance = getGnosisSafeProxyFactoryContractInstance;
    function getSignMessageLibContractInstance(safeVersion, signMessageLibContract) {
      switch (safeVersion) {
        case "1.3.0":
          return new SignMessageLibContract_V1_3_0_Web3_1.default(signMessageLibContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSignMessageLibContractInstance = getSignMessageLibContractInstance;
    function getCreateCallContractInstance(safeVersion, createCallContract) {
      switch (safeVersion) {
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          return new CreateCallEthersContract_V1_3_0_Web3_1.default(createCallContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getCreateCallContractInstance = getCreateCallContractInstance;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/Web3Adapter.js
var require_Web3Adapter = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/Web3Adapter.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _Web3Adapter_web3;
    var _Web3Adapter_signerAddress;
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib(), __toCommonJS(lib_exports));
    var safe_core_sdk_utils_1 = require_src();
    var contractInstancesWeb3_1 = require_contractInstancesWeb3();
    var Web3Adapter = class {
      constructor({ web3, signerAddress }) {
        _Web3Adapter_web3.set(this, void 0);
        _Web3Adapter_signerAddress.set(this, void 0);
        if (!web3) {
          throw new Error("web3 property missing from options");
        }
        __classPrivateFieldSet(this, _Web3Adapter_web3, web3, "f");
        __classPrivateFieldSet(this, _Web3Adapter_signerAddress, signerAddress, "f");
      }
      isAddress(address) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").utils.isAddress(address);
      }
      async getEip3770Address(fullAddress) {
        const chainId = await this.getChainId();
        return (0, safe_core_sdk_utils_1.validateEip3770Address)(fullAddress, chainId);
      }
      async getBalance(address, defaultBlock) {
        const balance = defaultBlock ? await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getBalance(address, defaultBlock) : await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getBalance(address);
        return bignumber_1.BigNumber.from(balance);
      }
      async getNonce(address, defaultBlock) {
        const nonce = defaultBlock ? await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getTransactionCount(address, defaultBlock) : await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getTransactionCount(address);
        return nonce;
      }
      async getChainId() {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getChainId();
      }
      getChecksummedAddress(address) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").utils.toChecksumAddress(address);
      }
      getSafeContract({ safeVersion, chainId, singletonDeployment, customContractAddress, customContractAbi }) {
        const contractAddress = customContractAddress !== null && customContractAddress !== void 0 ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid SafeProxy contract address");
        }
        const safeContract = this.getContract(contractAddress, customContractAbi !== null && customContractAbi !== void 0 ? customContractAbi : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.abi);
        return (0, contractInstancesWeb3_1.getSafeContractInstance)(safeVersion, safeContract);
      }
      getSafeProxyFactoryContract({ safeVersion, chainId, singletonDeployment, customContractAddress, customContractAbi }) {
        const contractAddress = customContractAddress !== null && customContractAddress !== void 0 ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid SafeProxyFactory contract address");
        }
        const proxyFactoryContract = this.getContract(contractAddress, customContractAbi !== null && customContractAbi !== void 0 ? customContractAbi : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.abi);
        return (0, contractInstancesWeb3_1.getGnosisSafeProxyFactoryContractInstance)(safeVersion, proxyFactoryContract);
      }
      getMultiSendContract({ safeVersion, chainId, singletonDeployment, customContractAddress, customContractAbi }) {
        const contractAddress = customContractAddress !== null && customContractAddress !== void 0 ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid MultiSend contract address");
        }
        const multiSendContract = this.getContract(contractAddress, customContractAbi !== null && customContractAbi !== void 0 ? customContractAbi : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.abi);
        return (0, contractInstancesWeb3_1.getMultiSendContractInstance)(safeVersion, multiSendContract);
      }
      getMultiSendCallOnlyContract({ safeVersion, chainId, singletonDeployment, customContractAddress, customContractAbi }) {
        const contractAddress = customContractAddress !== null && customContractAddress !== void 0 ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid MultiSendCallOnly contract address");
        }
        const multiSendContract = this.getContract(contractAddress, customContractAbi !== null && customContractAbi !== void 0 ? customContractAbi : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.abi);
        return (0, contractInstancesWeb3_1.getMultiSendCallOnlyContractInstance)(safeVersion, multiSendContract);
      }
      getCompatibilityFallbackHandlerContract({ safeVersion, chainId, singletonDeployment, customContractAddress, customContractAbi }) {
        const contractAddress = customContractAddress !== null && customContractAddress !== void 0 ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid Compatibility Fallback Handler contract address");
        }
        const multiSendContract = this.getContract(contractAddress, customContractAbi !== null && customContractAbi !== void 0 ? customContractAbi : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.abi);
        return (0, contractInstancesWeb3_1.getCompatibilityFallbackHandlerContractInstance)(safeVersion, multiSendContract);
      }
      getSignMessageLibContract({ safeVersion, chainId, singletonDeployment, customContractAddress, customContractAbi }) {
        const contractAddress = customContractAddress !== null && customContractAddress !== void 0 ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid SignMessageLib contract address");
        }
        const signMessageLibContract = this.getContract(contractAddress, customContractAbi !== null && customContractAbi !== void 0 ? customContractAbi : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.abi);
        return (0, contractInstancesWeb3_1.getSignMessageLibContractInstance)(safeVersion, signMessageLibContract);
      }
      getCreateCallContract({ safeVersion, chainId, singletonDeployment, customContractAddress, customContractAbi }) {
        const contractAddress = customContractAddress !== null && customContractAddress !== void 0 ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid CreateCall contract address");
        }
        const createCallContract = this.getContract(contractAddress, customContractAbi !== null && customContractAbi !== void 0 ? customContractAbi : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.abi);
        return (0, contractInstancesWeb3_1.getCreateCallContractInstance)(safeVersion, createCallContract);
      }
      getContract(address, abi, options) {
        return new (__classPrivateFieldGet(this, _Web3Adapter_web3, "f")).eth.Contract(abi, address, options);
      }
      async getContractCode(address, defaultBlock) {
        const code = defaultBlock ? await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getCode(address, defaultBlock) : await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getCode(address);
        return code;
      }
      async isContractDeployed(address, defaultBlock) {
        const contractCode = await this.getContractCode(address, defaultBlock);
        return contractCode !== "0x";
      }
      async getStorageAt(address, position) {
        const content = await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getStorageAt(address, position);
        const decodedContent = this.decodeParameters(["address"], content);
        return decodedContent[0];
      }
      async getTransaction(transactionHash) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getTransaction(transactionHash);
      }
      async getSignerAddress() {
        return __classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f");
      }
      signMessage(message) {
        if (!__classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f")) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.sign(message, __classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f"));
      }
      async signTypedData(safeTransactionEIP712Args, methodVersion) {
        if (!__classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f")) {
          throw new Error("This method requires a signer");
        }
        const typedData = (0, safe_core_sdk_utils_1.generateTypedData)(safeTransactionEIP712Args);
        let method = "eth_signTypedData_v3";
        if (methodVersion === "v4") {
          method = "eth_signTypedData_v4";
        } else if (!methodVersion) {
          method = "eth_signTypedData";
        }
        const jsonTypedData = JSON.stringify(typedData);
        const signedTypedData = {
          jsonrpc: "2.0",
          method,
          params: methodVersion === "v3" || methodVersion === "v4" ? [__classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f"), jsonTypedData] : [jsonTypedData, __classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f")],
          from: __classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f"),
          id: new Date().getTime()
        };
        return new Promise((resolve, reject) => {
          const provider = __classPrivateFieldGet(this, _Web3Adapter_web3, "f").currentProvider;
          function callback(err, val) {
            if (err) {
              reject(err);
              return;
            }
            if ((val === null || val === void 0 ? void 0 : val.result) == null) {
              reject(new Error("EIP-712 is not supported by user's wallet"));
              return;
            }
            resolve(val.result);
          }
          provider.send(signedTypedData, callback);
        });
      }
      estimateGas(transaction, callback) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.estimateGas(transaction, callback);
      }
      call(transaction, defaultBlock) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.call(transaction, defaultBlock);
      }
      encodeParameters(types, values) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.abi.encodeParameters(types, values);
      }
      decodeParameters(types, values) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.abi.decodeParameters(types, values);
      }
    };
    _Web3Adapter_web3 = /* @__PURE__ */ new WeakMap(), _Web3Adapter_signerAddress = /* @__PURE__ */ new WeakMap();
    exports.default = Web3Adapter;
  }
});

// node_modules/@safe-global/safe-web3-lib/dist/src/index.js
var require_src2 = __commonJS({
  "node_modules/@safe-global/safe-web3-lib/dist/src/index.js"(exports) {
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Web3Adapter_1 = __importDefault(require_Web3Adapter());
    exports.default = Web3Adapter_1.default;
  }
});
export default require_src2();
//# sourceMappingURL=@safe-global_safe-web3-lib.js.map
